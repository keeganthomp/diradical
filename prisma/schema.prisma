// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  PLAY_INITIATED
  PLAY_SAVED
}

enum PayoutStatus {
  ASSIGNED
  PAID
}

////////////////////////////
// Next Auth
////////////////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // next auth things
  id               String      @id @default(cuid())
  name             String?
  email            String?     @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  // end next auth things
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  username         String      @unique @db.VarChar(45)
  stripeCustomerId String      @unique @db.VarChar(255)
  stripeAccountId  String?     @unique @db.VarChar(255) // only set if user is an artist to receive payouts
  isArtist         Boolean     @default(false)
  membership       Membership?
  tracks           Track[]
  events           Event[]
  initiatedPayouts Payout[]    @relation("initiatedPayouts")
  receivedPayouts  Payout[]    @relation("receivedPayouts")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

////////////////////////////
// End Next Auth
////////////////////////////

model Track {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(45)
  audio     String   @unique @db.VarChar(255) // IPFS hash
  art       String   @db.VarChar(255) // IPFS hash
  artist    User?    @relation(fields: [artistId], references: [id])
  artistId  String
  archived  Boolean  @default(false)
  events    Event[]
}

model Season {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  endedAt     DateTime?
  events      Event[]
  memberships Membership[]
  payouts     Payout[]
}

model Event {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      EventType
  track     Track?    @relation(fields: [trackId], references: [id])
  trackId   String
  season    Season?   @relation(fields: [seasonId], references: [id])
  seasonId  Int
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Membership {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User?    @relation(fields: [userId], references: [id])
  userId               String   @unique
  stripeSubscriptionId String
  season               Season?  @relation(fields: [seasonId], references: [id])
  seasonId             Int?
}

model Payout {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  amount         Int
  stripePayoutId String?      @unique @db.VarChar(255)
  status         PayoutStatus @default(ASSIGNED)
  initiator      User?        @relation("initiatedPayouts", fields: [initiatorId], references: [id])
  initiatorId    String
  receiver       User?        @relation("receivedPayouts", fields: [receiverId], references: [id])
  receiverId     String
  season         Season?      @relation(fields: [seasonId], references: [id])
  seasonId       Int
}
