// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  PLAY_INITIATED
  PLAY_SAVED
}

model User {
  id               String      @id @default(uuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  email            String      @unique @db.VarChar(255)
  username         String      @unique @db.VarChar(45)
  stripeCustomerId String      @unique @db.VarChar(255)
  stripeAccountId  String?     @unique @db.VarChar(255) // only set if user is an artist to receive payouts
  isArtist         Boolean     @default(false)
  membership       Membership?
  tracks           Track[]
  events           Event[]
  payouts          Payout[]
}

model Track {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(45)
  audio     String   @unique @db.VarChar(255) // IPFS hash
  art       String   @db.VarChar(255) // IPFS hash
  artist    User?    @relation(fields: [artistId], references: [id])
  artistId  String
  archived  Boolean  @default(false)
  events    Event[]
}

model Season {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  endedAt     DateTime?
  events      Event[]
  memberships Membership[]
  payouts     Payout[]
}

model Event {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      EventType
  track     Track?    @relation(fields: [trackId], references: [id])
  trackId   String
  season    Season?   @relation(fields: [seasonId], references: [id])
  seasonId  Int
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Membership {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User?    @relation(fields: [userId], references: [id])
  userId               String   @unique
  stripeSubscriptionId String
  season               Season?  @relation(fields: [seasonId], references: [id])
  seasonId             Int?
}

model Payout {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  amount         Int
  stripePayoutId String   @unique @db.VarChar(255)
  user           User?    @relation(fields: [userId], references: [id])
  userId         String
  season         Season?  @relation(fields: [seasonId], references: [id])
  seasonId       Int
}
